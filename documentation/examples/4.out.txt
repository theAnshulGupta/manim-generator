from manim import *
import math

"""
Markov Chains – Manim Tutorial

This script creates an educational tutorial video about discrete-time Markov chains,
covering:
    1) Title and introduction
    2) Definition of discrete-time Markov chains
    3) The Markov property
    4) Transition probability matrices
    5) A 2-state example (Alice being up-to-date or behind)
    6) Summary

All of this content is packaged into a single Scene class named FullTutorial,
so that when rendered with Manim (Community Edition), it produces a cohesive
video tutorial.
"""

# ---------------------------------------------------------------------------
# Utility Helpers
# ---------------------------------------------------------------------------
FRAME_W, MARGIN = config.frame_width, 0.8

def shrink_to_fit(mobj: Mobject, margin: float = MARGIN):
    """Scale mobj down so its width ≤ frame width − margin (no enlargement)."""
    max_w = FRAME_W - margin
    if mobj.width > max_w:
        mobj.scale_to_fit_width(max_w)
    return mobj

# ---------------------------------------------------------------------------
# 1) Title & Introduction
# ---------------------------------------------------------------------------

def play_title(scene: Scene):
    title = Text("Markov Chains", font_size=64, weight=BOLD)
    subtitle = Text("A Visual Introduction to Discrete-Time Markov Chains", font_size=36, slant=ITALIC)
    shrink_to_fit(title); shrink_to_fit(subtitle)
    subtitle.next_to(title, DOWN, buff=0.4)
    
    scene.play(Write(title, run_time=2.5))
    scene.play(FadeIn(subtitle, shift=UP, run_time=1.8))
    scene.wait(1)
    scene.play(FadeOut(VGroup(title, subtitle)))

def play_intro(scene: Scene):
    text = (
        "In a discrete-time Markov chain, the state evolves at integer time steps.\n"
        "We have a finite state space S, and the transition from one state to another\n"
        "is governed by probabilities that depend only on the current state.\n"
        "This memoryless property is called the Markov property."
    )
    intro = Text(text, font_size=32, line_spacing=1.2)
    shrink_to_fit(intro)
    intro.to_edge(UP)
    
    scene.play(Write(intro, run_time=4))
    scene.wait(3)
    scene.play(FadeOut(intro))

# ---------------------------------------------------------------------------
# 2) Basic Definition of Markov Chains
# ---------------------------------------------------------------------------

def play_definition(scene: Scene):
    header = Text("Definition of a Discrete-Time Markov Chain", font_size=48, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)

    eq1 = MathTex(
        r"S = \{\,1, 2, \dots, m\}",
        font_size=42,
    )
    eq2 = MathTex(
        r"p_{ij} \;=\; P(X_{n+1} = j \mid X_n = i)",
        font_size=42,
    )
    eq1.next_to(header, DOWN, buff=0.6)
    eq2.next_to(eq1, DOWN, buff=0.6)
    for eq in (eq1, eq2):
        shrink_to_fit(eq)

    scene.play(Write(header))
    scene.play(Write(eq1))
    scene.play(Write(eq2))
    scene.wait(2)

    definition_text = Text(
        "The probability of moving to state j from state i in one step is p_{ij}.\n"
        "These probabilities do not depend on the earlier states, only on the current state.\n"
        "Hence, the process is said to have the 'Markov property'.",
        font_size=32,
        line_spacing=1.2,
    )
    shrink_to_fit(definition_text)
    definition_text.next_to(eq2, DOWN, buff=0.6)
    scene.play(FadeIn(definition_text, shift=UP))
    scene.wait(3)
    scene.play(FadeOut(VGroup(header, eq1, eq2, definition_text)))

# ---------------------------------------------------------------------------
# 3) Markov Property & Transition Matrix
# ---------------------------------------------------------------------------

def play_markov_property(scene: Scene):
    header = Text("The Markov Property", font_size=48, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)
    scene.play(Write(header))

    property_eq = MathTex(
        r"P\bigl(X_{n+1} = j \;\big\vert\; X_n = i,\; X_{n-1} = i_{n-1},\dots,X_0=i_0\bigr)"
        r" \;=\; p_{ij}",
        font_size=38
    ).next_to(header, DOWN, buff=0.6)
    shrink_to_fit(property_eq)
    scene.play(Write(property_eq))
    scene.wait(2)

    explanation = Text(
        "In other words, the future depends on the past only through the present state.",
        font_size=32
    )
    shrink_to_fit(explanation)
    explanation.next_to(property_eq, DOWN, buff=0.6)
    scene.play(FadeIn(explanation, shift=UP))
    scene.wait(2)
    scene.play(FadeOut(VGroup(header, property_eq, explanation)))

def play_transition_matrix(scene: Scene):
    header = Text("Transition Probability Matrix", font_size=48, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)
    scene.play(Write(header))

    matrix_tex = MathTex(
        r"\begin{pmatrix}"
        r"p_{11} & p_{12} & \cdots & p_{1m} \\"
        r"p_{21} & p_{22} & \cdots & p_{2m} \\"
        r"\vdots & \vdots & \ddots & \vdots \\"
        r"p_{m1} & p_{m2} & \cdots & p_{mm}"
        r"\end{pmatrix}",
        font_size=42,
    )
    shrink_to_fit(matrix_tex)
    matrix_tex.next_to(header, DOWN, buff=0.8)

    notes = Text(
        "Each row sums to 1:\n"
        "    ∑_{j=1 to m} p_{ij} = 1.\n"
        "Rows represent the distribution of the next state given the current state i.",
        font_size=32,
        line_spacing=1.2,
    )
    shrink_to_fit(notes)
    notes.next_to(matrix_tex, DOWN, buff=0.8)

    scene.play(Create(matrix_tex))
    scene.wait(1)
    scene.play(Write(notes, run_time=4))
    scene.wait(2)
    scene.play(FadeOut(VGroup(header, matrix_tex, notes)))

# ---------------------------------------------------------------------------
# 4) Two-State Example (Alice)
# ---------------------------------------------------------------------------

def play_two_state_example(scene: Scene):
    header = Text("Example: Alice (Up-to-Date vs. Behind)", font_size=44, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)
    scene.play(Write(header))

    text_desc = (
        "Alice can be:\n"
        "  • State 1: Up-to-date\n"
        "  • State 2: Behind\n\n"
        "If she's up-to-date now (state 1), then:\n"
        "   p_{11} = 0.8 (stays up-to-date),  p_{12} = 0.2 (falls behind).\n"
        "If she's behind now (state 2), then:\n"
        "   p_{21} = 0.6 (catches up),         p_{22} = 0.4 (remains behind)."
    )
    desc = Text(text_desc, font_size=30, line_spacing=1.4)
    shrink_to_fit(desc)
    desc.next_to(header, DOWN, buff=0.6)
    scene.play(Write(desc, run_time=5))
    scene.wait(3)
    scene.play(FadeOut(desc))
    scene.wait(0.5)
    scene.play(FadeOut(header))

    # Show the transition matrix
    matrix_header = Text("Transition Matrix:", font_size=32, weight=BOLD)
    matrix_header.to_edge(UP)
    matrix_tex = MathTex(
        r"\begin{pmatrix}"
        r"0.8 & 0.2 \\"
        r"0.6 & 0.4"
        r"\end{pmatrix}",
        font_size=48
    ).shift(DOWN*0.5)
    scene.play(Write(matrix_header))
    scene.play(Create(matrix_tex))
    scene.wait(2)
    scene.play(FadeOut(VGroup(matrix_header, matrix_tex)))

    # Show a transition graph
    graph_header = Text("Transition Graph", font_size=40, weight=BOLD)
    graph_header.to_edge(UP)
    scene.play(Write(graph_header))

    # We'll place two states "1" (left) and "2" (right).
    # Then we draw arrows with probabilities p_{11}, p_{12}, p_{21}, p_{22}.
    circle1 = Circle(radius=0.6, color=BLUE).shift(LEFT*3)
    circle2 = Circle(radius=0.6, color=BLUE).shift(RIGHT*3)
    label1 = Text("1", font_size=36).move_to(circle1.get_center())
    label2 = Text("2", font_size=36).move_to(circle2.get_center())

    scene.play(Create(circle1), Create(circle2))
    scene.play(FadeIn(label1), FadeIn(label2))

    # Arrows:
    arrow_11 = CurvedArrow(
        circle1.get_top() + UP*0.5 + RIGHT*0.5,
        circle1.get_top() + UP*0.5 + LEFT*0.5,
        angle=PI, color=YELLOW, tip_length=0.2
    ).scale(0.8)
    arrow_12 = Arrow(
        circle1.get_right() + UP*0.3, circle2.get_left() + UP*0.3, buff=0, color=GREEN
    )
    arrow_21 = Arrow(
        circle2.get_left() + DOWN*0.3, circle1.get_right() + DOWN*0.3, buff=0, color=GREEN
    )
    arrow_22 = CurvedArrow(
        circle2.get_top() + UP*0.5 + LEFT*0.5,
        circle2.get_top() + UP*0.5 + RIGHT*0.5,
        angle=PI, color=YELLOW, tip_length=0.2
    ).scale(0.8)

    p11_label = Tex("0.8", font_size=30).move_to(circle1.get_top() + UP*1.0)
    p12_label = Tex("0.2", font_size=30).move_to(midpoint(circle1.get_right(), circle2.get_left()) + UP*0.4)
    p21_label = Tex("0.6", font_size=30).move_to(midpoint(circle2.get_left(), circle1.get_right()) + DOWN*0.4)
    p22_label = Tex("0.4", font_size=30).move_to(circle2.get_top() + UP*1.0)

    scene.play(Create(arrow_11), FadeIn(p11_label))
    scene.play(Create(arrow_12), FadeIn(p12_label))
    scene.wait(1)
    scene.play(Create(arrow_21), FadeIn(p21_label))
    scene.play(Create(arrow_22), FadeIn(p22_label))
    scene.wait(2)
    scene.play(FadeOut(VGroup(
        graph_header, circle1, circle2, label1, label2,
        arrow_11, arrow_12, arrow_21, arrow_22,
        p11_label, p12_label, p21_label, p22_label
    )))

def midpoint(p1, p2):
    """Return the midpoint between two vectors or points."""
    return (p1 + p2) / 2

# ---------------------------------------------------------------------------
# 5) Summary
# ---------------------------------------------------------------------------

def play_summary(scene: Scene):
    # Use smaller font and spacing to prevent overlap
    summary = BulletedList(
        "A Markov chain has a finite state space S.",
        r"Transition probabilities $p_{ij}$ do not depend on previous states, only on the current.",
        "The transition matrix rows each sum to 1.",
        "The 2-state example demonstrates how probabilities can be visualized in a transition graph.",
        "Markov chains are widely used in stochastic modeling and many practical applications.",
        font_size=28,
    )
    summary.arrange(DOWN, aligned_edge=LEFT, buff=0.6)
    summary.to_edge(UP, buff=1)

    scene.play(Write(summary, run_time=6))
    scene.wait(3)
    scene.play(FadeOut(summary))

# ---------------------------------------------------------------------------
# Full Tutorial Scene (stitches everything together)
# ---------------------------------------------------------------------------
class FullTutorial(Scene):
    def construct(self):
        play_title(self)
        play_intro(self)
        play_definition(self)
        play_markov_property(self)
        play_transition_matrix(self)
        play_two_state_example(self)
        play_summary(self)