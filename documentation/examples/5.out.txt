from manim import *
import numpy as np

# ---------------------------------------------------------------------------
# Utility Helper
# ---------------------------------------------------------------------------
FRAME_W, MARGIN = config.frame_width, 0.8

def shrink_to_fit(mobj: Mobject, margin: float = MARGIN):
    """
    Scale mobj down so its width ≤ (frame width - margin).
    No enlargement is performed.
    """
    max_w = FRAME_W - margin
    if mobj.width > max_w:
        mobj.scale_to_fit_width(max_w)
    return mobj

# ---------------------------------------------------------------------------
# 1) Title & Introduction
# ---------------------------------------------------------------------------
def play_title(scene: Scene):
    title = Text("Linear Regression", font_size=64, weight=BOLD)
    subtitle = Text("A Basic Introduction", font_size=36, slant=ITALIC)
    shrink_to_fit(title)
    shrink_to_fit(subtitle)
    subtitle.next_to(title, DOWN, buff=0.4)

    scene.play(Write(title, run_time=2.5))
    scene.play(FadeIn(subtitle, shift=UP, run_time=1.8))
    scene.wait(1.0)
    scene.play(FadeOut(VGroup(title, subtitle)))

def play_introduction(scene: Scene):
    intro_text = Text(
        "Linear regression fits a line to data by minimizing the sum of squared errors.\n"
        "We estimate parameters θ₀ and θ₁ to model y = θ₀ + θ₁ x.",
        font_size=32,
        line_spacing=1.2,
    )
    shrink_to_fit(intro_text)
    intro_text.to_edge(UP, buff=1.0)

    scene.play(Write(intro_text, run_time=4))
    scene.wait(3)
    scene.play(FadeOut(intro_text))

# ---------------------------------------------------------------------------
# 2) Linear Regression Formulas
# ---------------------------------------------------------------------------
def play_regression_formulas(scene: Scene):
    header = Text("Linear Regression Formulas", font_size=48, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)

    # θ_1, θ_0 formulas
    eq_theta1 = MathTex(
        r"\hat{\theta}_1 = \frac{\sum_{i=1}^{n} \bigl(x_i - \bar{x}\bigr)\bigl(y_i - \bar{y}\bigr)}"
        r"{\sum_{i=1}^{n} \bigl(x_i - \bar{x}\bigr)^2}"
    )
    eq_theta0 = MathTex(
        r"\hat{\theta}_0 = \bar{y} - \hat{\theta}_1\,\bar{x}"
    )
    eq_theta1.next_to(header, DOWN, buff=0.8)
    eq_theta0.next_to(eq_theta1, DOWN, buff=0.6)

    for eq in (eq_theta1, eq_theta0):
        eq.scale(0.9)
        shrink_to_fit(eq)

    scene.play(Write(header))
    scene.play(Write(eq_theta1))
    scene.play(Write(eq_theta0))
    scene.wait(3)

    explanation = Text(
        "Here, (x̄, ȳ) are the sample means of x and y.\n"
        "These formulas come from minimizing the sum of squared residuals.",
        font_size=32,
        line_spacing=1.2,
    )
    shrink_to_fit(explanation)
    explanation.next_to(eq_theta0, DOWN, buff=0.6)
    scene.play(FadeIn(explanation, shift=UP))
    scene.wait(2)
    scene.play(FadeOut(VGroup(header, eq_theta1, eq_theta0, explanation)))

# ---------------------------------------------------------------------------
# 3) Example: Leaning Tower of Pisa
# ---------------------------------------------------------------------------
def play_pisa_example(scene: Scene):
    header = Text("Example: Leaning Tower of Pisa", font_size=44, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)
    scene.play(Write(header))

    description = Text(
        "Measurements of the lean (in meters) from 1975 to 1987.\n"
        "Fit a linear model y = θ₀ + θ₁ x, where x is year, y is lean.",
        font_size=32,
        line_spacing=1.2,
    )
    shrink_to_fit(description)
    description.next_to(header, DOWN, buff=0.6)
    scene.play(Write(description, run_time=5))
    scene.wait(2)

    data_text = (
        "Year:  1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987\n"
        "Lean:  2.9642, 2.9644, 2.9656, 2.9667, 2.9673, 2.9688, 2.9696,\n"
        "       2.9698, 2.9713, 2.9717, 2.9725, 2.9742, 2.9757"
    )
    data = Text(data_text, font_size=28, line_spacing=1.1)
    shrink_to_fit(data)
    data.next_to(description, DOWN, buff=0.6)
    scene.play(FadeIn(data, shift=UP, run_time=5))
    scene.wait(3)

    scene.play(FadeOut(VGroup(header, description, data)))

# ---------------------------------------------------------------------------
# 4) Visualization of Data and Fitted Line
# ---------------------------------------------------------------------------
def play_data_visualization(scene: Scene):
    header = Text("Data & Fitted Line", font_size=48, weight=BOLD)
    shrink_to_fit(header).to_edge(UP)
    scene.play(Write(header))

    # We'll put the data here (year, lean):
    years = np.array([1975, 1976, 1977, 1978, 1979, 1980, 1981,
                      1982, 1983, 1984, 1985, 1986, 1987])
    lean = np.array([2.9642, 2.9644, 2.9656, 2.9667, 2.9673, 2.9688, 2.9696,
                     2.9698, 2.9713, 2.9717, 2.9725, 2.9742, 2.9757])

    # For illustration, we can shift the x-axis to start near 1975 for a simpler chart:
    min_year = 1974
    x_vals = years - min_year  # shift so that 1975 -> 1, etc.
    # We'll find a convenient range for the axes
    x_max = max(x_vals) + 1
    y_min, y_max = min(lean), max(lean)

    # We'll create an Axes for our data
    axes = Axes(
        x_range=[0, x_max, 1],
        y_range=[2.96, 2.98, 0.005],  # a bit below min and above max
        x_length=8, y_length=4,
        axis_config={"include_tip": False},
    )
    x_label = axes.get_x_axis_label("Year - 1974", edge=RIGHT, direction=DOWN)
    y_label = axes.get_y_axis_label("Lean (m)")

    # Move the entire axes group up or down so we can fit the header
    axes_group = VGroup(axes, x_label, y_label).shift(DOWN*0.5)

    scene.play(Create(axes_group))
    scene.wait(1)

    # Plot data points
    dots = VGroup()
    for x, y in zip(x_vals, lean):
        dot = Dot(axes.c2p(x, y), color=YELLOW)
        dots.add(dot)
    scene.play(FadeIn(dots, run_time=2))
    scene.wait(1)

    # Suppose we have the regression line from the example:
    # The fitted line is y = 0.0009*x + 1.1233
    # But note that the 'x' in the formula is the actual year, so let's adapt for "x - 1974".
    # If the model is y = 0.0009*year + 1.1233,
    # then substituting year = X + 1974, we get:
    # y = 0.0009*(X + 1974) + 1.1233 = 0.0009*X + (0.0009*1974 + 1.1233).
    slope = 0.0009
    intercept = 0.0009 * 1974 + 1.1233  # shift for our X's

    line_graph = axes.plot(
        lambda x: slope * x + intercept,
        x_range=[0, x_max],
        color=BLUE
    )
    scene.play(Create(line_graph, run_time=3))
    scene.wait(2)

    scene.play(FadeOut(VGroup(header, axes_group, dots, line_graph)))

# ---------------------------------------------------------------------------
# 5) Summary
# ---------------------------------------------------------------------------
def play_summary(scene: Scene):
    # Use proper LaTeX for parameters to avoid unicode errors
    summary = BulletedList(
        r"Linear regression fits a line $y = \theta_0 + \theta_1 x$.",
        r"Parameters $\hat{\theta}_0, \hat{\theta}_1$ minimize sum of squared errors.",
        r"Example: Leaning tower data (1975--1987).",
        r"Data plotted alongside the estimated line.",
        r"Linear regression is a cornerstone of statistical modeling.",
        font_size=30,
    )
    shrink_to_fit(summary)
    summary.to_edge(UP, buff=1)

    scene.play(Write(summary, run_time=5))
    scene.wait(3)
    scene.play(FadeOut(summary))

# ---------------------------------------------------------------------------
# Full Tutorial Scene
# ---------------------------------------------------------------------------
class FullTutorial(Scene):
    def construct(self):
        play_title(self)
        play_introduction(self)
        play_regression_formulas(self)
        play_pisa_example(self)
        play_data_visualization(self)
        play_summary(self)